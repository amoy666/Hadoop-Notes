hdfs的整体架构
    主从架构
    一个主节点   多个从节点
    namenode
        用于存储元数据
            这里的元数据包括
            1）抽象目录树
            2）存储数据和block的对应关系
            3）block块存储的位置
        用于处理客户端的读写请求    读-->下载  写-->上传

    datanode
        负责真正的数据存储，存储数据的block
        真正处理读写
    secondarynamenode
        冷备份节点：助理  当namenode宕机时secondarynamenode不能主动切换为
        namenode，但可以手动切换为namenode
        但是secondarynamenode中存储的数据和namenode的大体相同
        主要作用：1）namenode宕机的时候帮助namenode恢复
                 2）帮助namenode做一些事情，分担namenode的压力
hdfs的优缺点
    优点
        1.可构建在廉价机器上,成本低
        通过多副本提高可靠性,提供了容错和恢复机制
        2.高容错性
        容错性:数据访问上一个节点数据丢失不影响整体数据访问
        数据自动保存多个副本,副本丢失后,自动恢复,最终恢复到用户配置的副本个数
        适合批处理适合离线数据处理
        移动计算而非数据,数据位置暴露给计算框架
        4.适合大数据处理
        GB、TB、甚至PB级数据,百万规模以上的文件数量,10K+节点规模
        5.流式文件访问不支持数据修改hdfs用于数据存储
        一次性写入,多次读取,保证数据一致性
    缺点
        1.不支持低延迟的数据访问   不只是实时/近实时数据访问
        2.不擅长存储大量的小文件    kb级别的
            1）寻址时间太长，可能会大于读取数据的时间  不划算
            进行数据访问的时候先找元数据
            原数据是和block对应的    1个block块对应一条元数据
            1000w个1kb的文件     存1000w块----1000w元数据
            在进行数据访问的时候可能花了1s的时间元数据并访问到数据块存储位置
            但是读取数据的时候可能只花了1ms的时间总体上不划算
            2)这样会造成元数据存储量过大  增加 namenode的压力
               在hdfs中元数据存储一般情况下一条元数据150byte左右
               1000w条元数据----10000000*150       1.5G
        3.不支持文件内容修改


hdfs的目录结构和Linux操作系统类似，以/为节点  我们将这个目录树称为抽象目录树
因为hdfs的目录结构代表的是所有数据节点的抽象出来的目录，不代表任何一个节点
hdfs：   /hadoop.zip    500M    被分为4个块存储
hdfs中存储的数据块是有编号的   blk_1  blk_2  blk_3  blk_4
/spark.zip   300M   3个块   blk_5   blk_6  blk_7
底层存储的时候每一个block都有一个唯一的id
hdfs的数据底层存储的时候，还是存储在真正的物理节点上的